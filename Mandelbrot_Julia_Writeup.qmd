---
title: "Mandelbrot and Julia Set"
format: 
  html: 
    code-fold: true
execute: 
  cache: true
  warning: false
---

## Background

The Mandelbrot set was a first effort of mine to coax out of R methods outside of my primary use of the language - statistic and data processing. The Mandelbrot set, as described on [Wikipedia](https://en.wikipedia.org/wiki/Mandelbrot_set) is "defined in the complex plane as the complex numbers $c$ for which the function $f_c(z)=z^2+c$ does not diverge to infinity when iterated starting at $z=0$." When the real and imaginary parts of $c$ are used as image coordinates, each pixel corresponds to membership or departure from the set. To get the beautiful coloration that is emblematic to visualizations of the set, points that escape from the set are colored according to how soon the sequence diverges.

## Create Mandelbrot set in R  
### Initial Function Setup  
A naive implementation in R is to create a grid of points and, using for loops, iterate the function $f_c(z)$ over each point up to a max number of iterations to establish escape count or membership. In R, uising for loops proves to be slow and a massive speedup can be achieved using R's vectorized nature as described [here](https://www.r-bloggers.com/2014/12/the-mandelbrot-set-in-r/).\
The main idea is that instead of a for loop being passed each individual complex number, the entire grid can be operated on simultaneously. To accomplish this, I created a function called `vector_mandelbrot` that takes several parameters to setup the calculation. 

1.  Creates a grid along `x` from `(xmin, xmax)` and `y` from `(ymin, ymax)`of length `xpixel` and `ypixel` respectively.
2.  The `x` and `y` values are then passed to `outer(x, y*1i, FUN = "+")` to create a grid in the complex plane as `x+yi`
3.  Creates matrix `z` and `k` to contain values of `f_c(z)` and iteration counts
4.  Calculates complex numbers in `for(i in 1:max_iteration)` by:
    i.  Finding `index` where `abs(z)<threshold` to see whether a point has escaped
    ii. For points that haven't escaped, find `z[index] = z[index]^2 + c[index]`
    iii. For points that haven't escaped, increment count `k[index] = k[index]+1`  
5. Returns the iteration count matrix `k`. 

```{r Mandelbrot Membership Function}
library(tidyverse)
library(RColorBrewer)
vector_mandelbrot_0 <- function(xmin = -2, xmax = .5, xpixel = 500, ymax = 1.2, ymin = -1.2, ypixel = 500, max_iterations = 500, showimage = TRUE, plt_color = "RdBu") {
  # My initial naive mandelbrot implementation didn't take advantage of R's vectorized nature and was slow. 
  # The following version that calculates the whole matrix simultaneously was inspired by Myles Harrison at https://www.r-bloggers.com/2014/12/the-mandelbrot-set-in-r/
  x <- seq(xmin, xmax, length.out = xpixel)
  y <- seq(ymin, ymax, length.out = ypixel)
  # Produces matrix of complex numbers, note that 'x' changes across the columns and 'y' changes down the rows. 
  # C is the value added in each iteration of Mandelbrot set
  c <- outer(x, y * 1i, FUN = "+")
  # Initialize empty matrix to hold calculated z's
  z <- matrix(0, nrow = xpixel, ncol = ypixel)
  # Initialize empty matrix to hold iteration counts
  k <- matrix(0, nrow = xpixel, ncol = ypixel)
  
  # Calculate the complex numbers up till escape and escape iteration. 
  
  for (j in 1:max_iterations) {
    # Note escape value of 1000. If this is changed, make sure to alter in calculation of nu below. 
    index <- which(abs(z) < 1000)
    z[index] <- z[index]^2 + c[index]
    k[index] <- k[index] + 1
  }
  list(k = k, z = z)
}
```

### Visualize Basic Membership  
The above function can be run with the defaults and the result can be passed to the `image` function for a simple visualization. To see membership, pixels that have a max value are considered part of the set (colored black) and all other pixels as not in the set (colored white). 

```{r Basic visual}
#| cache: true
results <- vector_mandelbrot_0()
k <- results$k
image(ifelse(k == 500, 0,1), asp = 1, col = c("black", "white"))
```

### Enhance coloring  
TO get the stunning multi-colored images of the Mandelbrot set, an additional piece of information can be considered - included in `k` is how quickly a point escapes from the Mandelbrot set. This can be used to add color to points that were formerly colored `white`.  
The challenge inherent in coloring this set is that the distribution of points is very asymetric; there are many points that are in the set, and many points that diverge quickly with only a few at other values. A basic histogram illustrates this point:  

```{r escape histogram}
# Helper function to convert output matrix to long-format
matrix_to_long <- function(m, x, y, max_iterations) {
  m %>% data.frame() %>% 
    # Add column names
    set_names(y) %>% 
    # Add row for row names
    cbind(x = x, .) %>% 
    # Pivot to long
    pivot_longer(!x, names_to = "y") %>% 
    mutate(y = as.numeric(y)) %>% 
    # Set points in set to 0
    mutate(value = ifelse(value == max_iterations, 0, value))
}

x <- seq(-2, .5, length.out=500)
y <- seq(-1.2, 1.2, length.out=500)

k_long <- matrix_to_long(k, x, y, 500)

ggplot(k_long, aes(x = value)) + 
  geom_histogram()
```

Using this distribution to color the set is underwhelming:  

```{r Initial visual bins}
# Note that the use of outer expands the first variable x along the column and y along the row. 
# Convert escape iterations and complex numbers to long dataframe to aid in coloring. 
mandelset <- matrix_to_long(k, x, y, 500)
zn <- matrix_to_long(results$z, x, y, 500) %>%
  rename("zn" = "value")
mandelset <- left_join(mandelset, zn, by = c("x", "y"))

image(x,y,t(matrix(mandelset$value, nrow = 500)), asp = 1, 
      col = colorRampPalette(c("white", "black"))(500))
```


A method to smooth this distribution is called "Histogram Binning" and was found on [Wikipedia - Plotting algorithms for the Mandelbrot set](https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set)

The idea behind this method is that the above histogram can be altered by changing the scale to [0, 1] instead of [0, maxiteration] and evenly distributes colors to the same proportional area. The method is implemented on long-format escape counts `k`:  

1. Group together all similar escape values `group_by(value)`
2. Find total number of each escape value `summarize(n = n())`
3. Create new color variable as proportion of each bin to total number of counts `mutate(color = n/sum(n))`
4. Change the color variable to be the cumulative sum `mutate(color = cumsum(color))`

These new `colors` need to be mapped back to the original set of counts which can be done with a `left_join` and selecting `value`, the iteration count column, to join by. Looking at a new histogram of these values, the distribution of colors is much better.  

```{r Histogram binning}
#| cache: true
# Histogram binning of colors as described at Wikipedia: https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set
# Changes iteration at escape to [0,1] scale with a more even weighting based on number of times an escape value shows up. 
colors <- mandelset %>%
  group_by(value) %>%
  summarize(n = n()) %>%
  mutate(color = n/sum(n)) %>%
  mutate(color = cumsum(color)) %>%
  select(-n) %>%
  mutate(color2 = lag(color))

# Combine the 
mandelset <- left_join(mandelset, colors, by = "value")

ggplot(mandelset, aes(x = color)) + 
  geom_histogram()
```

And using this new distribution of colors to visualize the set:  

```{r binned colors}
#| cache: true
image(x,y,t(matrix(mandelset$color, nrow = 500)), asp = 1, 
      col = colorRampPalette(c("white", "black"))(500), 
      ylab = "Im(z)", xlab = "Re(z)")
```

### Smoothing  
A final piece of the rendering explored here is to smooth the color distribution. The histogram binning above leaves characteristic 'bands' of colors where the escape counts change. One final enhancement is these bands can be smoothed by interpolating between adjacent colors.  
One method for this is found at [Renormalizing the Mandelbrot Escape](https://linas.org/art-gallery/escape/escape.html). The idea behind this method is that there is additional information that can be retrieved about how quickly a point diverges. Up to this point, the iteration count has been used which is an integer value that indicates when $|z_n|>\text{cutoff}$. Considering the function $f_c(z)=z^2+c$, point that escapes the set will have satisfy $\text{cutoff}<|z_n|<\text{cutoff}^2$. If a point is below the cutoff it will be part of the set establishing the lower bound, and if it is above the cutoff it must be bounded on the top as $z_{n+1} = z_n^2+c$. Choosing a larger cutoff value makes the effect of $c$ negligible.  
Since $z_n$ is bounded, we can use it to establish a fractional iteration count using the boundary cutoff as $\nu(z_n)=\log_2(\log_{\text{cutoff}}(|z_n|))$. This relationship effectively takes $|z_n|$ and with the first logarithm, converts it to a value 1 to 2 and with the second to a value 0 to 1.  
This fractional iteration $\nu$ can then be used to interpolate between the color assigned to a particular iteration count and the next color creating a smooth transition between bands. In R, this looks like `smooth_color = color + (next_color - color) * nu`; when `nu = 1`, `smooth_color` will be equal to `next_color`, when `nu = 0`, `smooth_color` will be equal to `color`, and otherwise it'll be a linear combination of the two.  

```{r}
# unneeded
# mandelset <- mandelset %>%
#   mutate(nu = ifelse(value == 0, value[which(k == 500)],
#                      value[which(k < 500)] + 1 - 
#                        log(log(abs(zn[which(k < 500)]))/log(1000))/log(2)))

# Logarithm function that handles the cases when values less than 1 are input 
# to the double logarithm which will happen for all points in the set. 
log0 <- function(x) {
  ret <- vector(mode = "numeric", length = length(x))
  ret[which(x > 1)] <- log(x[which(x > 1)])
  ret[which(x <= 1)] <- 0
  ret
}

mandelset <- mandelset %>%
  mutate(nu = ifelse(value == 0, 0, log0(log0(abs(zn))/log(1000))/log(2)))

# mandelset_nu <- mandelset$value + 1 - log(log(abs(mandelset$zn))/log(1000))/log(2)

# Interpolate between colors
mandelset <- mandelset %>% 
  mutate(scolor = color + (color2 - color)*nu)
```

#### Fractional Iterations Plot  
The computed $\nu(z)$ can be plotted: 

```{r Fractional iterations}
image(x,y,t(matrix(mandelset$nu, nrow = 500)), asp = 1, 
      col = colorRampPalette(c("white", "black"))(10000), 
      xlab = "Re(z)", ylab = "Im(z)")
```
#### Smoothed Colors  
Interpolating between colors using $\nu$ yields the following:

```{r Smoothed coloring}
image(x,y,t(matrix(mandelset$scolor, nrow = 500)), asp = 1, 
      col = colorRampPalette(c("white", "black"))(10000), 
      xlab = "Re(z)", ylab = "Im(z)")
```

## Creating a Function  
To simplify the process, all these steps can be combined into a single `vector_mandelbrot` function where:  

1. Using input parameters, setup rendering
    i. `xmin`, `xmax`, `ymin`, `ymax` to set extents of rendering
    ii. `xpixel`, and `ypixel` to determine number of pixels per dimension
    iii. `max_iterations` to set maximum number of iterations to determine set membership
    iv. `showimage` to determine whether data or a plot is returned
    v. `plt_color` to select a coloration for the plot, allowed names from `brewer.pal.info`
2. Calculates `zn` (final z-values) and `k` (escape iteration) matrices
3. Do histogram binning and color smoothing, combining results to single long format data.frame. 
4. Plot results

```{r}
vector_mandelbrot <- function(xmin = -2, xmax = .5, xpixel = 500, 
                              ymax = 1.2, ymin = -1.2, ypixel = 500, 
                              max_iterations = 500, 
                              showimage = TRUE, plt_color = "RdBu") {
  x <- seq(xmin, xmax, length.out = xpixel)
  y <- seq(ymin, ymax, length.out = ypixel)
  
  # Produces matrix of complex numbers, note that 'x' changes across the columns and 'y' changes down the rows. 
  # C is the value added in each iteration of Mandelbrot set
  c <- outer(x, y * 1i, FUN = "+")
  # Initialize empty matrix to hold calculated z's
  z <- matrix(0, nrow = xpixel, ncol = ypixel)
  # Initialize empty matrix to hold iteration counts
  k <- matrix(0, nrow = xpixel, ncol = ypixel)
  
  # Calculate the complex numbers up till escape and escape iteration. 
  
  for (j in 1:max_iterations) {
    # Note escape value of 1000. If this is changed, make sure to alter in calculation of nu below. 
    index <- which(abs(z) < 1000)
    z[index] <- z[index]^2 + c[index]
    k[index] <- k[index] + 1
  }
  
  # Note that the use of outer expands the first variable x along the column and y along the row. 
  # Convert escape iterations and complex numbers to long dataframe to aid in coloring. 
  mandelset <- matrix_to_long(k, x, y, max_iterations)
  z <- matrix_to_long(z, x, y, max_iterations) %>%
    rename("zn" = "value")
  mandelset <- left_join(mandelset, z, by = c("x", "y"))
  
  colors <- mandelset %>%
    group_by(value) %>%
    summarize(n = n()) %>%
    mutate(color = n/sum(n)) %>%
    mutate(color = cumsum(color)) %>%
    select(-n) %>%
    mutate(color2 = lag(color, default = 0))
  
  # Combine the mandelset and colors
  mandelset <- left_join(mandelset, colors, by = "value")
  
  # Add fractional iteration counts
  # nu has problem that if abs(zn) crosses cutoff on max iteration, the point
  # will have k = maxiteration but will give result from log0. To overcome, 
  # include ifelse to test if zn was produced at max iteration and exclude. 
  # Otherwise, messes up color distribution with outliers. 
  mandelset <- mandelset %>%
    mutate(nu = ifelse(value == 0, 0, log0(log0(abs(zn))/log(1000))/log(2)))
  
  # Interpolate between colors
  mandelset <- mandelset %>% 
    mutate(scolor = color + (color2 - color)*nu)
  
  if(showimage) {
    cn <- brewer.pal.info[plt_color,]$maxcolors
    image(x,y,t(matrix(mandelset$scolor, nrow = ypixel)), asp = 1, 
          col = colorRampPalette(c("black", 
                                   brewer.pal(cn, plt_color)))(256), 
          xlab = "Re(z)", ylab = "Im(z)")
  } else {
    mandelset
  }
}
```

### Results
```{r}
vector_mandelbrot()
vector_mandelbrot(xmin = -1, xmax = -.5, ymin = 0, ymax = .5)
vector_mandelbrot(xmin = -1.8, xmax =  -1.7, ymin = -.05, ymax = .05)
vector_mandelbrot(xmin = -.58, xmax =  -.54, ymin = .62, ymax = .66)
vector_mandelbrot(xmin = -0.6585, xmax = -0.6518, ymin = -0.3816, ymax = -0.3745)
vector_mandelbrot(xmin = -.6531, xmax = -.6514, ymin = -.3774, ymax = -.3759)
```

## Julia Set  
Whereas the Mandelbrot set is defined as points $c$ in the complex plane that are bounded when $f_c(z)=z^2+c$ is iterated starting at $z=0$, there are many different Julia sets. The quadratic Julia set is generated with the same $f_c(z)=z^2+c$ but $c$ is held fixed on the plane while the initial $z$ is in the complex plane with real component $[-2,2]$ and imaginary component $[-2,2]$.  
The following setup is similar to the Mandelbrot set function but changes how `k` and `z` are calculated to reflect the Julia set. One alteration for this function is to try and reduce computation time by decreasing the number of calculations. A simple place to find a speedup is `which(|z|) < cutoff`; in the Mandelbrot set calculation, this was done over the entire grid each iteration of the `for` loop. Here, the indices tested in `which` are subsetted first. 

```{r}
c <- -.77146-.10119i
x <- seq(-2, 2, length.out = 500)
y <- seq(-2, 2, length.out = 500)
cgrid <- outer(x, y * 1i, FUN = "+")
k <- matrix(0, nrow = length(x), ncol = length(y))

# Index finds which indices are still under cutoff |z| < 1000
# To speed calculation, instead of |cgrid| on whole grid, can subset to 
# only values that are still under the cutoff
subindex <- 1:length(cgrid) # Initially all points
for (j in 1:1000) {
  # Which |z| are under cutoff? 
  index <- which(abs(cgrid[subindex]) < 1000)
  # Iterate grid, subset of points under cutoff
  cgrid[subindex[index]] <- cgrid[subindex[index]]^2 + c
  # Increment iteration count, subset of points under cutoff
  k[subindex[index]] <- k[subindex[index]]+1
  # Select subset of overall set that are under cutoff (index)
  # Preserves index of original grid
  subindex <- subindex[index]
}

image(x, y, k, asp = 1, col = colorRampPalette(c("white", "black"))(500))
```

The initial results are visually appealing but similar to the Mandelbrot set the color scale is not optimal. 

### Julia Histogram binning and Smoothing  
For this set as well, histogram binning works well to change the color scale. To mix things up from the Mandelbrot set above, I wanted to try without the aid of dplyr. To create the color binning, the `table` function creates a summary of counts which are normalized by dividing by the number of points in the complex grid, and then passed to `cumsum` which converts to range of [0,1]. This new color range is then used to change the matrix of iteration counts `k` to a matrix of colors `bin_k`. 


```{r Bin Colors - Julia}
# Histogram binning for colors, avoiding dplyr
# Note 500*500 are dimensions of plot
t1 <- cumsum(table(k)/(500*500))

bin_k <- k
bin_k[which(k == 1000)] <- 0
for (i in 1:length(t1)) {
  bin_k[bin_k == as.numeric(names(t1)[i])] <- t1[i]
}

image(x, y, bin_k, asp = 1, col = colorRampPalette(c("black", "white"))(500))
```

Finally, as this coloring unsurprisingly has discrete bands, the colors can be smoothed. This is accomplished by: 

1. Creating a duplicate of `bin_k` that is created by matching the iteration count to the normalized table lagged by 1
2. Calculating the fractional iteration $\nu$ the same way as the Mandelbrot set
3. Interpolating between the first bin of colors and lagged bin of colors as a function of $\nu$. 

```{r Interpolate Colors - Julia}
# for (i in 1:length(t1)) {
#   k[k == as.numeric(names(t1)[i])] <- t1[i]
# }

bin_k_lag <- k
for (i in 1:length(t1)) {
  bin_k_lag[bin_k_lag == as.numeric(names(t1)[i])] <- lag(t1, default = 0)[i]
}

nu <- ifelse(abs(cgrid) < 1000, 0, log0(log0(abs(cgrid))/log(1000))/log(2))

k_smooth <- bin_k + (bin_k_lag - bin_k) * nu

image(x, y, k_smooth, asp = 1, col = colorRampPalette(c("black", "white"))(500))

```

## Creating a function  
The above steps can be combined to a single function and passed different $c$ values. 

```{r Vector_Julia function}
vector_julia <- function(xmin = -2, xmax = 2, ymin = -2, ymax = 2, 
                         xpixel = 500, ypixel = 500, 
                         c = -.77146-.10119i, max_iterations = 1000, 
                         showplot = TRUE) {
  x <- seq(xmin, xmax, length.out = xpixel)
  y <- seq(ymin, ymax, length.out = ypixel)
  cgrid <- outer(x, y * 1i, FUN = "+")
  k <- matrix(0, nrow = length(x), ncol = length(y))

  # Index finds which indices are still under cutoff |z| < 1000
  # To speed calculation, instead of |cgrid| on whole grid, can subset to 
  # only values that are still under the cutoff
  subindex <- 1:length(cgrid) # Initially all points
  for (j in 1:max_iterations) {
    # Which |z| are under cutoff? 
    index <- which(abs(cgrid[subindex]) < 1000)
    # Iterate grid, subset of points under cutoff
    cgrid[subindex[index]] <- cgrid[subindex[index]]^2 + c
    # Increment iteration count, subset of points under cutoff
    k[subindex[index]] <- k[subindex[index]]+1
    # Select subset of overall set that are under cutoff (index)
    # Preserves index of original grid
    subindex <- subindex[index]
  }
  
  t1 <- cumsum(table(k)/(xpixel*ypixel)) 
  # Makes maxiteration count 0 instead of 1000
  # k[which(k == 1000)] <- 0
  bin_k <- k
  for (i in 1:length(t1)) {
    bin_k[bin_k == as.numeric(names(t1)[i])] <- t1[i]
  }
  
  bin_k_lag <- k
  
  for (i in 1:length(t1)) {
    bin_k_lag[bin_k_lag == as.numeric(names(t1)[i])] <- lag(t1, default = 0)[i]
  }
  
  nu <- ifelse(abs(cgrid) < 1000, 0, log0(log0(abs(cgrid))/log(1000))/log(2))
  
  k_smooth <- bin_k + (bin_k_lag - bin_k) * nu
  if(showplot) {
  image(x, y, k_smooth, asp = 1, 
        col = colorRampPalette(c("black", "white"))(500))
  } else {
    list(x=x, y=y, k0 = k, k=k_smooth)
  }
}
```

```{r Julia plots}
#| cache: TRUE
vector_julia()
```

## Julia gif  
Creating a gif of the Julia set involves changing the input $c$ through a range of values and combining them with `magick`. The following creates a temporary directory to store images, runs through a series of $c$ values in `vector_julia(c)` saving each as a jpg, then `image_read`s each, combines them with `image_join`, and finally creates a gif with `image_animate` before removing the temporary directory. 

```{r Julia gif}
#| eval: FALSE
library(magick)
# Make temp directory to store image files
dir_out <- file.path(tempdir(), "julia_img")
dir.create(dir_out, recursive = TRUE)
dim <- 1000

cs <- -.77146 + seq(-1, 1, length.out = 30)*1i #c's to use
for (i in 1:length(cs)){
  # Open's png device to save
  png(file.path(dir_out, paste0(sprintf("%04d", i), ".png")), 
      width = dim, height = dim)
  # Can change xpixel, ypixel for higher resolution gif
  vector_julia(c = cs[i], xpixel = dim, ypixel = dim)
  # Close png
  dev.off()
}

# Read created image file names
imgs <- list.files(dir_out, full.names = TRUE)
# Read images into list
img_list <- lapply(imgs, image_read)
# Combine list
img_joined <- image_join(img_list)
# animate joined images
img_animated <- image_animate(img_joined, fps = 10)
# Save gif
image_write(image = img_animated,
            path = "julia2.gif")
unlink(dir_out, recursive = TRUE)
# Test if temp directory was removed
# dir.exists(dir_out)
```

![Julia Gif](julia3.gif)
