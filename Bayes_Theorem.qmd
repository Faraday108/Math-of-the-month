---
title: "What does your COVID test really mean?"
format: 
  revealjs:
    footer: "Background Image by Freepix"
title-slide-attributes: 
  data-background-image: ./images/inverted.png
  data-background-opacity: ".1"
---

```{r, setup}
#| echo: FALSE
library(ggVennDiagram)
library(ggplot2)
library(DiagrammeR)
library(DiagrammeRsvg)
library(rsvg)
library(xml2)
path <- "./images/inverted.png"

#Image by <a href="https://www.freepik.com/free-vector/hand-drawn-scientific-formulas-chalkboard_7465599.htm#query=equation%20background&position=0&from_view=keyword&track=ais">Freepik</a>
```

## Probability Basics {background-image="./images/inverted.png" background-opacity=.1}

-   Probability is defined as the likelihood of an event occurring. Equal to:

$$
\frac{\text{number of successes}}{\text{total number of possible outcomes}}
$$

-   Examples include:
    -   Getting a 6 when rolling a 6-sided die $P(A) = 1/6$
    -   Getting an even number when rolling a 6-sided die $P(B) = 3/6$

## Probability Scale {background-image="./images/inverted.png" background-opacity=.1}
Probability ranges from 0 to 1, with an unlikely event tending toward 0 and a likely event tending toward 1. 

![Retrieved from mathisfun.com/data/images/probability-line.svg](https://www.mathsisfun.com/data/images/probability-line.svg)

## Venn Diagrams {background-image="./images/inverted.png" background-opacity=.1}
* Venn diagrams are often used to help visualize probabilities. 
* Here are two events: $A$ and $B$ that occur with probability $P(A)$ and $P(B)$
* They can overlap and have probability $P(AB)$ 
* Another useful probability is $P(A|B)$ (read probability of A given B). 
* Can be visually seen as area of overlap divided by area of B or $P(A|B) = \frac{P(A∩B)}{P(B)}$

## Venn Diagrams {background-image="./images/inverted.png" background-opacity=.1}

```{r Venn, warning = FALSE}
x <- list(A = 1:5, B = 1:7)
data <- process_data(Venn(x))

ggVennDiagram(x, label = "none", set_size = 10) + 
  scale_fill_gradient(low = "#F4FAFE", high = "#4981BF") + 
  scale_color_manual(values = c("black", "black")) + 
  theme(legend.position = "none") +
  #geom_sf_label(aes(label = c(NA, NA, "A∩B")),  alpha = 0.5, size = 10) 
  geom_label(aes(X, Y, label = c(NA, NA, "A∩B")), 
             data = venn_regionlabel(data), alpha = 0.5, size = 10)
```

## Bayes' Theorem  {.smaller background-image="./images/inverted.png" background-opacity=.1}
* Mathematical formula for determining conditional probability - the likelihood of an outcome occurring based on prior information. 
* Commonly used in medicine to answer questions such as "How likely is a patient to have a disease given a positive test result?"  

$$
P(A|B) = P(A) \times \frac{P(B|A)}{P(B)}
$$

  * $P(A|B)$: Probability of disease given positive test
  * $P(A)$: Probability of disease
  * $P(B|A)$: Probability of positive test given disease
  * $P(B)$: Probability of positive test

## Bayes' Theorem - Probability vs Natural Frequencies {.smaller background-image="./images/inverted.png" background-opacity=.1}
* Bayes' theorem with probabilities is great in a program but can be confusing to comprehend and learn. 
* Can also be understood with "natural frequencies" where a probability is translated to a concrete population
* The following example shows an example of how Bayes' theorem works in medical diagnosis: 
  * Imagine taking a home COVID test **without reason**, how likely are you to have COVID if you got a positive test? 
  * COVID home antigen sensitivity 50%, specificity 97%, assume .1% population has disease at time of test (very wrong assumption, just for illustration).
  * How would this change if you took a home COVID test **with symptoms**? Let's  assume 10% chance of having COVID if symptomatic. 

## {background-image="./images/inverted.png" background-opacity=.1}

```{r digraph1}
#| echo: false
grViz("digraph {
      graph[layout = dot, 
      rankdir = TB, 
      overlap = true, 
      fontsize = 20, 
      label = 'Conditional Probability\nNo Reason', 
      labelloc = 't']
      
      node [shape = oval, 
      fixedsize = true,
      width = 1.3] 
      
      Primary [label = 'One Person']
      Secondary1 [label = '.1%\nCOVID']
      Secondary2 [label = '99.9%\nNo COVID']
      Tertiary1 [label = '50%\nPositive Test']
      Tertiary2 [label = '50%\nNegative Test']
      Tertiary3 [label = '3%\nPositive Test']
      Tertiary4 [label = '97%\nNegative Test']
      
      Primary -> Secondary1
      Primary -> Secondary2
      Secondary1 -> Tertiary1 [label = 'Test\n50% Sensitivity']
      Secondary1 -> Tertiary2
      Secondary2 -> Tertiary3 [label = 'Test\n97% Specificity']
      Secondary2 -> Tertiary4
      }") %>% 
  export_svg() %>%
  read_xml() %>%
  write_xml("conditional.svg")
```

![](./conditional.svg)

## {background-image="./images/inverted.png" background-opacity=.1}

```{r digraph2}
#| echo: false
library(DiagrammeR)
grViz("digraph {
      graph[layout = dot, 
      rankdir = TB, 
      overlap = true, 
      fontsize = 20, 
      label = 'Natural Frequencies\nNo Reason', 
      labelloc = 't']
      
      node [shape = oval, 
      fixedsize = true,
      width = 1.3] 
      
      Primary [label = '100,000 People']
      Secondary1 [label = '100\nCOVID']
      Secondary2 [label = '99,900\nNo COVID']
      Tertiary1 [label = '50\nPositive Tests']
      Tertiary2 [label = '50\nNegative Tests']
      Tertiary3 [label = '2,997\nPositive Tests']
      Tertiary4 [label = '96,903\nNegative Tests']
      
      Primary -> Secondary1
      Primary -> Secondary2
      Secondary1 -> Tertiary1 [label = 'Test\n50% Sensitivity']
      Secondary1 -> Tertiary2
      Secondary2 -> Tertiary3 [label = 'Test\n97% Specificity']
      Secondary2 -> Tertiary4
      }") %>% 
  export_svg() %>%
  read_xml() %>%
  write_xml("natural_frequency.svg")
```

![](./natural_frequency.svg)

## {background-image="./images/inverted.png" background-opacity=.1}
```{r digraph3}
#| echo: false
library(DiagrammeR)
grViz("digraph {
      graph[layout = dot, 
      rankdir = TB, 
      overlap = true, 
      fontsize = 20, 
      label = 'Natural Frequencies - SYMPTOMATIC', 
      labelloc = 't']
      
      node [shape = oval, 
      fixedsize = true,
      width = 1.3] 
      
      Primary [label = '100,000 People']
      Secondary1 [label = '10,000\nCOVID']
      Secondary2 [label = '90,000\nNo COVID']
      Tertiary1 [label = '5,000\nPositive Tests']
      Tertiary2 [label = '5,000\nNegative Tests']
      Tertiary3 [label = '2,700\nPositive Tests']
      Tertiary4 [label = '87,300\nNegative Tests']
      
      Primary -> Secondary1
      Primary -> Secondary2
      Secondary1 -> Tertiary1 [label = 'Test\n50% Sensitivity']
      Secondary1 -> Tertiary2
      Secondary2 -> Tertiary3 [label = 'Test\n97% Specificity']
      Secondary2 -> Tertiary4
      }") %>% 
  export_svg() %>%
  read_xml() %>%
  write_xml("natural_frequency_symptomatic.svg")
```

![](./natural_frequency_symptomatic.svg)

## Analysis of Flowcharts {.smaller background-image="./images/inverted.png" background-opacity=.1}
::::: {.columns}

::: {.column width="33%"}
**Conditional Probability - No Reason** 
Probability of having COVID (D) given a positive test (+) equals:

$$
\begin{aligned}
&P(D|+) = \\
& = P(D)\frac{P(+|D)}{P(+)} \\
&       = \frac{.001 \times .5}{.001 \times .5 + .999 \times .03} \\
&       = \color{Red}{\textbf{1.6%}}
\end{aligned}
$$
:::

::: {.column width="33%"}
**Natural Frequency - No Reason** Probability of having COVID given a positive test: $\frac{50}{50 + 2997} = \color{Red}{\textbf{1.6%}}$

:::

::: {.column width="33%"}
* **Natural Frequency - SYMPTOMATIC**  Probability of having COVID given a positive test **and** symptoms: $\frac{5000}{5000+2700} = \color{Red}{\textbf{65%}}$

:::
:::::

## Updating Priors {background-image="./images/inverted.png" background-opacity=.1}
* Notice that the probability of having COVID if you were *asymptomatic* was **1.6%**
* This was updated to **65%** if you were **symptomatic**
* This is a big reason why mass screening tests aren't recommended for unlikely diseases
* Updating the probability of having COVID (or other disease) is called updating the prior, a central feature of Bayesian Statistics